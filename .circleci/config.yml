version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            MIGRATED="$(curl --insecure https://kvdb.io/3rFPaDQ7swx3kL7JTj5GMN/migration_<<parameters.workflow_id>>)"
            if [[ "$MIGRATED" == "1" ]]; then
              cd backend
              npm i
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            exit 0

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            exit 0
    
  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['e4:a3:da:d2:78:fa:be:e9:cf:c0:65:9c:cb:8c:6b:b8']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
  
  run-migrations:
    docker:
      - image: cimg/node:10.24.1
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            echo "Running migrations"
            npm run migrations | tee migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
                echo https://kvdb.io/3rFPaDQ7swx3kL7JTj5GMN/migration_${CIRCLE_WORKFLOW_ID:0:7}
                curl https://kvdb.io/3rFPaDQ7swx3kL7JTj5GMN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
  
  deploy-frontend:
    docker:
      - image: cimg/node:18.17
    environment:
      NODE_OPTIONS: "--openssl-legacy-provider"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install awscli
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['e4:a3:da:d2:78:fa:be:e9:cf:c0:65:9c:cb:8c:6b:b8']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add -U nodejs ansible curl npm
            pip install awscli
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: Deploy backend service
          command: |
            tar -C backend -czf .circleci/ansible/backend.tar.gz .
            cd .circleci/ansible
            echo "inventory.text"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl nodejs npm
            pip install awscli
      - run:
          name: Smoke test BE
          command: |
            source frontend/.env
            echo "APIURL is $API_URL"
            if curl "$API_URL/api/status" | grep ok; then
              return 0
            else
              return 1
            fi
      - run:
          name: SMoke test FE
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl $URL | grep Welcome; then
              echo "I want to fail"
              return 1
            else
              return 1
            fi
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl nodejs npm
            pip install awscli
      - run:
          name: Update cloudfront
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID | tee OldWorkflowID.txt
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
            echo "Old: $OldWorkflowID"
            echo "Current: ${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths: [project/OldWorkflowID.txt]
  cleanup:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
      - run:
          name: Cleanup
          command: |
            export OldWorkflowID=$(cat OldWorkflowID.txt)
            echo "Old: $OldWorkflowID"
            echo "Current: ${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID}" != "${OldWorkflowID}" ]]; then
              echo "Delete old stacks"
              aws s3 rm s3://udapeople-$OldWorkflowID --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-$OldWorkflowID
              aws cloudformation delete-stack --stack-name udapeople-frontend-$OldWorkflowID
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [build-backend, run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
